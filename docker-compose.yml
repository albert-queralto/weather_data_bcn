name: weather_data_bcn
services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: ./src/backend/Dockerfile
    links:
      - postgres_db
    ports:
      - "8100:8100"
    expose:
      - 8100
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4GB
    env_file:
      - .env
    networks:
      - weather_network
    stdin_open: true # docker run -i
    volumes:
      - ${LOCAL_PATH}/backend:${CONTAINER_PATH}/backend
    tty: true # docker run -t
    # command: ["/root/home/init_config.sh"]
    restart: unless-stopped
    entrypoint: /bin/bash
    depends_on:
      - postgres_db
  
  frontend:
    container_name: frontend
    build:
      context: ./src/frontend
      dockerfile: ./Dockerfile
    ports:
      - "3000:3000"
    env_file: '.env'
    environment:
      - NODE_ENV=development
    command: npm start
    volumes:
      - ${LOCAL_PATH}/frontend:${CONTAINER_PATH}/frontend
      - ${LOCAL_PATH}/node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - weather_network

  reverse-proxy:
    image: nginx:latest
    container_name: reverse-proxy
    env_file: '.env'
    ports:
      - 443:443
      - 80:80
    volumes:
      - ./src/nginx/nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - backend
      - frontend
    networks:
      - weather_network

  scheduler:
    image: mcuadros/ofelia:latest
    container_name: scheduler
    env_file:
      - .env
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${LOCAL_PATH}/config.ini:/etc/ofelia/config.ini
      - ${LOCAL_PATH}/logs:${CONTAINER_PATH}/logs
    networks:
      - weather_network
    command: daemon --config=/etc/ofelia/config.ini
    restart: unless-stopped
    depends_on:
      - backend

  postgres_db:
    image: postgres:16
    container_name: postgres_db
    restart: unless-stopped
    volumes:
      - ${LOCAL_PATH}/postgres/db:/var/lib/postgresql/data
      - ${LOCAL_PATH}/postgres/sql:/docker-entrypoint-initdb.d/
    environment:
      - POSTGRES_DB=${POSTGRES_DB_NAME}
      - POSTGRES_USER=${POSTGRES_DB_USER}
      - POSTGRES_PASSWORD=${POSTGRES_DB_PASSWORD}
    deploy:
      resources:
        limits:
          cpus: '4'
          memory: 4GB
    env_file:
      - .env
    ports:
      - 5000:5432
    expose: 
      - 5000
    networks:
      - weather_network

networks:
  weather_network:
volumes:
  postgres_db:
    external: true